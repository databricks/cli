# {{.project_name}}

{{- $skip_tests := or (eq .language "sql") (eq .lakeflow_only "yes")}}
{{- $has_python_package_dir := and (or (eq .include_python "yes") (eq .include_job "yes") (eq .include_pipeline "yes")) (not (eq .lakeflow_only "yes"))}}
{{- $is_lakeflow := eq .lakeflow_only "yes"}}

The '{{.project_name}}' project was generated by using the default template.

* `src/`: {{if eq .language "sql"}}SQL{{else}}Python{{end}} source code for this project.
{{- if $has_python_package_dir}}
  * `src/{{.project_name}}/`: Shared Python code that can be used by jobs and pipelines.
{{- end}}
* `resources/`:  Resource configurations (jobs, pipelines, etc.)
{{- if not $skip_tests}}
* `tests/`: Unit tests for the shared Python code.
* `fixtures/`: Fixtures for data sets (primarily used for testing).
{{end}}

## Getting started

Choose how you want to work on this project:

(a) Directly in your Databricks workspace, see
    https://docs.databricks.com/dev-tools/bundles/workspace.

(b) Locally with an IDE like Cursor or VS Code, see
    https://docs.databricks.com/vscode-ext.

(c) With command line tools, see https://docs.databricks.com/dev-tools/cli/databricks-cli.html

{{- if not $is_lakeflow}}

If you're developing with an IDE, dependencies for this project should be installed using uv:

*  Make sure you have the UV package manager installed.
   It's an alternative to tools like pip: https://docs.astral.sh/uv/getting-started/installation/.
*  Run `uv sync --dev` to install the project's dependencies.
{{end}}

# Using this project using the CLI

The Databricks workspace and IDE extensions provide a graphical interface for working
with this project. It's also possible to interact with it directly using the CLI:

1. Authenticate to your Databricks workspace, if you have not done so already:
    ```
    $ databricks configure
    ```

2. To deploy a development copy of this project, type:
    ```
    $ databricks bundle deploy --target dev
    ```
    (Note that "dev" is the default target, so the `--target` parameter
    is optional here.)

    This deploys everything that's defined for this project.
    {{- if eq .include_pipeline "yes"}}
    For example, the default template would deploy a pipeline called
    `[dev yourname] {{.project_name_short}}_etl` to your workspace.
    You can find that resource by opening your workpace and clicking on **Jobs & Pipelines**.
    {{- else if eq .include_job "yes"}}
    For example, the default template would deploy a job called
    `[dev yourname] {{.project_name_short}}_job` to your workspace.
    You can find that resource by opening your workpace and clicking on **Jobs & Pipelines**.
    {{- end}}

3. Similarly, to deploy a production copy, type:
   ```
   $ databricks bundle deploy --target prod
   ```

   {{- if eq .include_pipeline "yes"}}
   Note the default template has a includes a job that runs the pipeline every day
   (defined in resources/sample_job.job.yml). The schedule
   is paused when deploying in development mode (see
   https://docs.databricks.com/dev-tools/bundles/deployment-modes.html).
   {{- else if eq .include_job "yes"}}
   Note that the default job from the template has a schedule that runs every day
   (defined in resources/sample_job.job.yml). The schedule
   is paused when deploying in development mode (see
   https://docs.databricks.com/dev-tools/bundles/deployment-modes.html).
   {{- end}}

4. To run a job or pipeline, use the "run" command:
   ```
   $ databricks bundle run
   ```
{{- if and (not $skip_tests) (not $is_lakeflow)}}

5. Finally, to run tests locally, use `pytest`:
   ```
   $ uv run pytest
   ```
{{- end}}
