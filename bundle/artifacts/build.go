package artifacts

import (
	"context"
	"fmt"
	"path/filepath"

	"github.com/databricks/cli/bundle"
	"github.com/databricks/cli/bundle/config"
	"github.com/databricks/cli/libs/cmdio"
	"github.com/databricks/cli/libs/diag"
	"github.com/databricks/cli/libs/exec"
	"github.com/databricks/cli/libs/log"
	"github.com/databricks/cli/libs/python"
)

func Build() bundle.Mutator {
	return &build{}
}

type build struct{}

func (m *build) Apply(ctx context.Context, b *bundle.Bundle) diag.Diagnostics {
	for _, artifactName := range sortedKeys(b.Artifacts) {
		artifact := b.Artifacts[artifactName]

		if a.BuildCommand == "" {
			continue
		}

		cmdio.LogString(ctx, fmt.Sprintf("Building %s...", artifactName))

		var e *exec.Executor
		var err error
		if a.Executable != "" {
			e, err = exec.NewCommandExecutorWithExecutable(a.Path, a.Executable)
		} else {
			e, err = exec.NewCommandExecutor(a.Path)
			a.Executable = e.ShellType()
		}

		if err != nil {
			// TODO: location
			return diag.FromError(err)
		}

		out, err := e.Exec(ctx, a.BuildCommand)

		if err != nil {
			return diag.Errorf("build failed %s, error: %v, output: %s", artifactName, err, out)
		}
		log.Infof(ctx, "Build succeeded")

		if artifact.Type == "whl" {
			dir := artifact.Path
			distPath := filepath.Join(artifact.Path, "dist")
			wheels := python.FindFilesWithSuffixInPath(distPath, ".whl")
			if len(wheels) == 0 {
				return diag.Errorf("cannot find built wheel in %s for package %s", dir, artifactName)
			}
			for _, wheel := range wheels {
				artifact.Files = append(artifact.Files, config.ArtifactFile{
					Source: wheel,
				})
			}
		}
	}

	// We need to expand glob reference after build mutator is applied because
	// if we do it before, any files that are generated by build command will
	// not be included into artifact.Files and thus will not be uploaded.
	return expandGlobs(ctx, b)
}
