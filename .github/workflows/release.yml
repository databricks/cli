name: release

on:
  push:
    tags:
      - "v*"

  workflow_dispatch:

jobs:
  goreleaser:
    runs-on:
      group: databricks-deco-testing-runner-group
      labels: ubuntu-latest-deco

    outputs:
      artifacts: ${{ steps.releaser.outputs.artifacts }}

    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version-file: go.mod

          # The default cache key for this action considers only the `go.sum` file.
          # We include .goreleaser.yaml here to differentiate from the cache used by the push action
          # that runs unit tests. This job produces and uses a different cache.
          cache-dependency-path: |
            go.sum
            .goreleaser.yaml

      # Log into the GitHub Container Registry. The goreleaser action will create
      # the docker images and push them to the GitHub Container Registry.
      - uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: "ghcr.io"
          username: "${{ github.actor }}"
          password: "${{ secrets.GITHUB_TOKEN }}"

      # QEMU is required to build cross platform docker images using buildx.
      # It allows virtualization of the CPU architecture at the application level.
      - name: Set up QEMU dependency
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0

      - name: Run GoReleaser
        id: releaser
        uses: goreleaser/goreleaser-action@9c156ee8a17a598857849441385a2041ef570552 # v6.3.0
        with:
          version: ~> v2
          args: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-setup-cli-release-pr:
    runs-on:
      group: databricks-deco-testing-runner-group
      labels: ubuntu-latest-deco

    needs: goreleaser

    steps:
      - name: Set VERSION variable from tag
        run: |
          VERSION=${{ github.ref_name }}
          echo "VERSION=${VERSION:1}" >> $GITHUB_ENV

      - name: Update setup-cli
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ secrets.DECO_GITHUB_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: 'databricks',
              repo: 'setup-cli',
              workflow_id: 'release-pr.yml',
              ref: 'main',
              inputs: {
                version: "${{ env.VERSION }}",
              }
            });

  create-homebrew-tap-release-pr:
    runs-on:
      group: databricks-deco-testing-runner-group
      labels: ubuntu-latest-deco

    needs: goreleaser

    steps:
      - name: Set VERSION variable from tag
        run: |
          VERSION=${{ github.ref_name }}
          echo "VERSION=${VERSION:1}" >> $GITHUB_ENV

      - name: Update homebrew-tap
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ secrets.DECO_GITHUB_TOKEN }}
          script: |
            let artifacts = ${{ needs.goreleaser.outputs.artifacts }}
            artifacts = artifacts.filter(a => a.type == "Archive")
            artifacts = new Map(
              artifacts.map(a => [
                a.goos + "_" + a.goarch + "_" + a.extra.Format,
                a.extra.Checksum.replace("sha256:", "")
              ])
            )

            await github.rest.actions.createWorkflowDispatch({
              owner: 'databricks',
              repo: 'homebrew-tap',
              workflow_id: 'release-pr.yml',
              ref: 'main',
              inputs: {
                version: "${{ env.VERSION }}",
                darwin_amd64_sha: artifacts.get('darwin_amd64_zip'),
                darwin_arm64_sha: artifacts.get('darwin_arm64_zip'),
                linux_amd64_sha: artifacts.get('linux_amd64_zip'),
                linux_arm64_sha: artifacts.get('linux_arm64_zip')
              }
            });

  create-vscode-extension-update-pr:
    runs-on:
      group: databricks-deco-testing-runner-group
      labels: ubuntu-latest-deco

    needs: goreleaser

    steps:
      - name: Set VERSION variable from tag
        run: |
          VERSION=${{ github.ref_name }}
          echo "VERSION=${VERSION:1}" >> $GITHUB_ENV

      - name: Update CLI version in the VSCode extension
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ secrets.DECO_GITHUB_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: 'databricks',
              repo: 'databricks-vscode',
              workflow_id: 'update-cli-version.yml',
              ref: 'main',
              inputs: {
                version: "${{ env.VERSION }}",
              }
            });

  pypi-publish:
    runs-on:
      group: databricks-deco-testing-runner-group
      labels: ubuntu-latest-deco

    needs: goreleaser

    # IMPORTANT:
    # - 'id-token: write' is mandatory for OIDC and trusted publishing to PyPi
    # - 'environment: release' is a part of OIDC assertion done by PyPi
    #
    # See: https://docs.pypi.org/trusted-publishers/creating-a-project-through-oidc/
    environment: release
    permissions:
      id-token: write

    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Install uv
        uses: astral-sh/setup-uv@f0ec1fc3b38f5e7cd731bb6ce540c5af426746bb # v6.1.0
        with:
          version: "0.6.5"

      - name: Build wheel
        working-directory: experimental/python
        run: make build

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@76f52bc884231f62b9a034ebfe128415bbaabdfc # v1.12.4
        with:
          packages-dir: experimental/python/dist
