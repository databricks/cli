
>>> $CLI credentials create-credential --help
Create a credential.
  
  Creates a new credential. The type of credential to be created is determined
  by the **purpose** field, which should be either **SERVICE** or **STORAGE**.
  
  The caller must be a metastore admin or have the metastore privilege
  **CREATE_STORAGE_CREDENTIAL** for storage credentials, or
  **CREATE_SERVICE_CREDENTIAL** for service credentials.

  Arguments:
    NAME: The credential name. The name must be unique among storage and service
      credentials within the metastore.

Usage:
  databricks credentials create-credential NAME [flags]

Flags:
      --comment string              Comment associated with the credential.
  -h, --help                        help for create-credential
      --json JSON                   either inline JSON string or @path/to/file.json with request body (default JSON (0 bytes))
      --purpose CredentialPurpose   Indicates the purpose of the credential. Supported values: [SERVICE, STORAGE]
      --read-only                   Whether the credential is usable only for read operations.
      --skip-validation             Optional.

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI credentials delete-credential --help
Delete a credential.
  
  Deletes a service or storage credential from the metastore. The caller must be
  an owner of the credential.

  Arguments:
    NAME_ARG: Name of the credential.

Usage:
  databricks credentials delete-credential NAME_ARG [flags]

Flags:
      --force   Force an update even if there are dependent services (when purpose is **SERVICE**) or dependent external locations and external tables (when purpose is **STORAGE**).
  -h, --help    help for delete-credential

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI credentials generate-temporary-service-credential --help
Generate a temporary service credential.
  
  Returns a set of temporary credentials generated using the specified service
  credential. The caller must be a metastore admin or have the metastore
  privilege **ACCESS** on the service credential.

  Arguments:
    CREDENTIAL_NAME: The name of the service credential used to generate a temporary credential

Usage:
  databricks credentials generate-temporary-service-credential CREDENTIAL_NAME [flags]

Flags:
  -h, --help        help for generate-temporary-service-credential
      --json JSON   either inline JSON string or @path/to/file.json with request body (default JSON (0 bytes))

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI credentials get-credential --help
Get a credential.
  
  Gets a service or storage credential from the metastore. The caller must be a
  metastore admin, the owner of the credential, or have any permission on the
  credential.

  Arguments:
    NAME_ARG: Name of the credential.

Usage:
  databricks credentials get-credential NAME_ARG [flags]

Flags:
  -h, --help   help for get-credential

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI credentials list-credentials --help
List credentials.
  
  Gets an array of credentials (as __CredentialInfo__ objects).
  
  The array is limited to only the credentials that the caller has permission to
  access. If the caller is a metastore admin, retrieval of credentials is
  unrestricted. There is no guarantee of a specific ordering of the elements in
  the array.

Usage:
  databricks credentials list-credentials [flags]

Flags:
  -h, --help                        help for list-credentials
      --max-results int             Maximum number of credentials to return.
      --page-token string           Opaque token to retrieve the next page of results.
      --purpose CredentialPurpose   Return only credentials for the specified purpose. Supported values: [SERVICE, STORAGE]

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI credentials update-credential --help
Update a credential.
  
  Updates a service or storage credential on the metastore.
  
  The caller must be the owner of the credential or a metastore admin or have
  the MANAGE permission. If the caller is a metastore admin, only the
  __owner__ field can be changed.

  Arguments:
    NAME_ARG: Name of the credential.

Usage:
  databricks credentials update-credential NAME_ARG [flags]

Flags:
      --comment string                 Comment associated with the credential.
      --force                          Force an update even if there are dependent services (when purpose is **SERVICE**) or dependent external locations and external tables (when purpose is **STORAGE**).
  -h, --help                           help for update-credential
      --isolation-mode IsolationMode   Whether the current securable is accessible from all workspaces or a specific set of workspaces. Supported values: [ISOLATION_MODE_ISOLATED, ISOLATION_MODE_OPEN]
      --json JSON                      either inline JSON string or @path/to/file.json with request body (default JSON (0 bytes))
      --new-name string                New name of credential.
      --owner string                   Username of current owner of credential.
      --read-only                      Whether the credential is usable only for read operations.
      --skip-validation                Supply true to this argument to skip validation of the updated credential.

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI credentials validate-credential --help
Validate a credential.
  
  Validates a credential.
  
  For service credentials (purpose is **SERVICE**), either the
  __credential_name__ or the cloud-specific credential must be provided.
  
  For storage credentials (purpose is **STORAGE**), at least one of
  __external_location_name__ and __url__ need to be provided. If only one of
  them is provided, it will be used for validation. And if both are provided,
  the __url__ will be used for validation, and __external_location_name__ will
  be ignored when checking overlapping urls. Either the __credential_name__ or
  the cloud-specific credential must be provided.
  
  The caller must be a metastore admin or the credential owner or have the
  required permission on the metastore and the credential (e.g.,
  **CREATE_EXTERNAL_LOCATION** when purpose is **STORAGE**).

Usage:
  databricks credentials validate-credential [flags]

Flags:
      --credential-name string          Required.
      --external-location-name string   The name of an existing external location to validate.
  -h, --help                            help for validate-credential
      --json JSON                       either inline JSON string or @path/to/file.json with request body (default JSON (0 bytes))
      --purpose CredentialPurpose       The purpose of the credential. Supported values: [SERVICE, STORAGE]
      --read-only                       Whether the credential is only usable for read operations.
      --url string                      The external location url to validate.

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)
