
>>> $CLI quality-monitors cancel-refresh --help
Cancel refresh.
  
  Cancel an active monitor refresh for the given refresh ID.
  
  The caller must either: 1. be an owner of the table's parent catalog 2. have
  **USE_CATALOG** on the table's parent catalog and be an owner of the table's
  parent schema 3. have the following permissions: - **USE_CATALOG** on the
  table's parent catalog - **USE_SCHEMA** on the table's parent schema - be an
  owner of the table
  
  Additionally, the call must be made from the workspace where the monitor was
  created.

  Arguments:
    TABLE_NAME: Full name of the table.
    REFRESH_ID: ID of the refresh.

Usage:
  databricks quality-monitors cancel-refresh TABLE_NAME REFRESH_ID [flags]

Flags:
  -h, --help   help for cancel-refresh

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI quality-monitors create --help
Create a table monitor.
  
  Creates a new monitor for the specified table.
  
  The caller must either: 1. be an owner of the table's parent catalog, have
  **USE_SCHEMA** on the table's parent schema, and have **SELECT** access on the
  table 2. have **USE_CATALOG** on the table's parent catalog, be an owner of
  the table's parent schema, and have **SELECT** access on the table. 3. have
  the following permissions: - **USE_CATALOG** on the table's parent catalog -
  **USE_SCHEMA** on the table's parent schema - be an owner of the table.
  
  Workspace assets, such as the dashboard, will be created in the workspace
  where this call was made.

  Arguments:
    TABLE_NAME: Full name of the table.
    ASSETS_DIR: The directory to store monitoring assets (e.g. dashboard, metric tables).
    OUTPUT_SCHEMA_NAME: Schema where output metric tables are created.

Usage:
  databricks quality-monitors create TABLE_NAME ASSETS_DIR OUTPUT_SCHEMA_NAME [flags]

Flags:
      --baseline-table-name string   Name of the baseline table from which drift metrics are computed from.
  -h, --help                         help for create
      --json JSON                    either inline JSON string or @path/to/file.json with request body (default JSON (0 bytes))
      --skip-builtin-dashboard       Whether to skip creating a default dashboard summarizing data quality metrics.
      --warehouse-id string          Optional argument to specify the warehouse for dashboard creation.

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI quality-monitors delete --help
Delete a table monitor.
  
  Deletes a monitor for the specified table.
  
  The caller must either: 1. be an owner of the table's parent catalog 2. have
  **USE_CATALOG** on the table's parent catalog and be an owner of the table's
  parent schema 3. have the following permissions: - **USE_CATALOG** on the
  table's parent catalog - **USE_SCHEMA** on the table's parent schema - be an
  owner of the table.
  
  Additionally, the call must be made from the workspace where the monitor was
  created.
  
  Note that the metric tables and dashboard will not be deleted as part of this
  call; those assets must be manually cleaned up (if desired).

  Arguments:
    TABLE_NAME: Full name of the table.

Usage:
  databricks quality-monitors delete TABLE_NAME [flags]

Flags:
  -h, --help   help for delete

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI quality-monitors get --help
Get a table monitor.
  
  Gets a monitor for the specified table.
  
  The caller must either: 1. be an owner of the table's parent catalog 2. have
  **USE_CATALOG** on the table's parent catalog and be an owner of the table's
  parent schema. 3. have the following permissions: - **USE_CATALOG** on the
  table's parent catalog - **USE_SCHEMA** on the table's parent schema -
  **SELECT** privilege on the table.
  
  The returned information includes configuration values, as well as information
  on assets created by the monitor. Some information (e.g., dashboard) may be
  filtered out if the caller is in a different workspace than where the monitor
  was created.

  Arguments:
    TABLE_NAME: Full name of the table.

Usage:
  databricks quality-monitors get TABLE_NAME [flags]

Flags:
  -h, --help   help for get

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI quality-monitors get-refresh --help
Get refresh.
  
  Gets info about a specific monitor refresh using the given refresh ID.
  
  The caller must either: 1. be an owner of the table's parent catalog 2. have
  **USE_CATALOG** on the table's parent catalog and be an owner of the table's
  parent schema 3. have the following permissions: - **USE_CATALOG** on the
  table's parent catalog - **USE_SCHEMA** on the table's parent schema -
  **SELECT** privilege on the table.
  
  Additionally, the call must be made from the workspace where the monitor was
  created.

  Arguments:
    TABLE_NAME: Full name of the table.
    REFRESH_ID: ID of the refresh.

Usage:
  databricks quality-monitors get-refresh TABLE_NAME REFRESH_ID [flags]

Flags:
  -h, --help   help for get-refresh

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI quality-monitors list-refreshes --help
List refreshes.
  
  Gets an array containing the history of the most recent refreshes (up to 25)
  for this table.
  
  The caller must either: 1. be an owner of the table's parent catalog 2. have
  **USE_CATALOG** on the table's parent catalog and be an owner of the table's
  parent schema 3. have the following permissions: - **USE_CATALOG** on the
  table's parent catalog - **USE_SCHEMA** on the table's parent schema -
  **SELECT** privilege on the table.
  
  Additionally, the call must be made from the workspace where the monitor was
  created.

  Arguments:
    TABLE_NAME: Full name of the table.

Usage:
  databricks quality-monitors list-refreshes TABLE_NAME [flags]

Flags:
  -h, --help   help for list-refreshes

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI quality-monitors regenerate-dashboard --help
Regenerate a monitoring dashboard.
  
  Regenerates the monitoring dashboard for the specified table.
  
  The caller must either: 1. be an owner of the table's parent catalog 2. have
  **USE_CATALOG** on the table's parent catalog and be an owner of the table's
  parent schema 3. have the following permissions: - **USE_CATALOG** on the
  table's parent catalog - **USE_SCHEMA** on the table's parent schema - be an
  owner of the table
  
  The call must be made from the workspace where the monitor was created. The
  dashboard will be regenerated in the assets directory that was specified when
  the monitor was created.

  Arguments:
    TABLE_NAME: Full name of the table.

Usage:
  databricks quality-monitors regenerate-dashboard TABLE_NAME [flags]

Flags:
  -h, --help                  help for regenerate-dashboard
      --json JSON             either inline JSON string or @path/to/file.json with request body (default JSON (0 bytes))
      --warehouse-id string   Optional argument to specify the warehouse for dashboard regeneration.

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI quality-monitors run-refresh --help
Queue a metric refresh for a monitor.
  
  Queues a metric refresh on the monitor for the specified table. The refresh
  will execute in the background.
  
  The caller must either: 1. be an owner of the table's parent catalog 2. have
  **USE_CATALOG** on the table's parent catalog and be an owner of the table's
  parent schema 3. have the following permissions: - **USE_CATALOG** on the
  table's parent catalog - **USE_SCHEMA** on the table's parent schema - be an
  owner of the table
  
  Additionally, the call must be made from the workspace where the monitor was
  created.

  Arguments:
    TABLE_NAME: Full name of the table.

Usage:
  databricks quality-monitors run-refresh TABLE_NAME [flags]

Flags:
  -h, --help   help for run-refresh

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI quality-monitors update --help
Update a table monitor.
  
  Updates a monitor for the specified table.
  
  The caller must either: 1. be an owner of the table's parent catalog 2. have
  **USE_CATALOG** on the table's parent catalog and be an owner of the table's
  parent schema 3. have the following permissions: - **USE_CATALOG** on the
  table's parent catalog - **USE_SCHEMA** on the table's parent schema - be an
  owner of the table.
  
  Additionally, the call must be made from the workspace where the monitor was
  created, and the caller must be the original creator of the monitor.
  
  Certain configuration fields, such as output asset identifiers, cannot be
  updated.

  Arguments:
    TABLE_NAME: Full name of the table.
    OUTPUT_SCHEMA_NAME: Schema where output metric tables are created.

Usage:
  databricks quality-monitors update TABLE_NAME OUTPUT_SCHEMA_NAME [flags]

Flags:
      --baseline-table-name string   Name of the baseline table from which drift metrics are computed from.
      --dashboard-id string          Id of dashboard that visualizes the computed metrics.
  -h, --help                         help for update
      --json JSON                    either inline JSON string or @path/to/file.json with request body (default JSON (0 bytes))

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)
