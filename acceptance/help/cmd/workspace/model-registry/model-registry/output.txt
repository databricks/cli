
>>> $CLI model-registry approve-transition-request --help
Approve transition request.
  
  Approves a model version stage transition request.

  Arguments:
    NAME: Name of the model.
    VERSION: Version of the model.
    STAGE: Target stage of the transition. Valid values are:
      
      * None: The initial stage of a model version.
      
      * Staging: Staging or pre-production stage.
      
      * Production: Production stage.
      
      * Archived: Archived stage.
    ARCHIVE_EXISTING_VERSIONS: Specifies whether to archive all current model versions in the target
      stage.

Usage:
  databricks model-registry approve-transition-request NAME VERSION STAGE ARCHIVE_EXISTING_VERSIONS [flags]

Flags:
      --comment string   User-provided comment on the action.
  -h, --help             help for approve-transition-request
      --json JSON        either inline JSON string or @path/to/file.json with request body (default JSON (0 bytes))

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI model-registry create-comment --help
Post a comment.
  
  Posts a comment on a model version. A comment can be submitted either by a
  user or programmatically to display relevant information about the model. For
  example, test results or deployment errors.

  Arguments:
    NAME: Name of the model.
    VERSION: Version of the model.
    COMMENT: User-provided comment on the action.

Usage:
  databricks model-registry create-comment NAME VERSION COMMENT [flags]

Flags:
  -h, --help        help for create-comment
      --json JSON   either inline JSON string or @path/to/file.json with request body (default JSON (0 bytes))

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI model-registry create-model --help
Create a model.
  
  Creates a new registered model with the name specified in the request body.
  
  Throws RESOURCE_ALREADY_EXISTS if a registered model with the given name
  exists.

  Arguments:
    NAME: Register models under this name

Usage:
  databricks model-registry create-model NAME [flags]

Flags:
      --description string   Optional description for registered model.
  -h, --help                 help for create-model
      --json JSON            either inline JSON string or @path/to/file.json with request body (default JSON (0 bytes))

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI model-registry create-model-version --help
Create a model version.
  
  Creates a model version.

  Arguments:
    NAME: Register model under this name
    SOURCE: URI indicating the location of the model artifacts.

Usage:
  databricks model-registry create-model-version NAME SOURCE [flags]

Flags:
      --description string   Optional description for model version.
  -h, --help                 help for create-model-version
      --json JSON            either inline JSON string or @path/to/file.json with request body (default JSON (0 bytes))
      --run-id string        MLflow run ID for correlation, if source was generated by an experiment run in MLflow tracking server.
      --run-link string      MLflow run link - this is the exact link of the run that generated this model version, potentially hosted at another instance of MLflow.

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI model-registry create-transition-request --help
Make a transition request.
  
  Creates a model version stage transition request.

  Arguments:
    NAME: Name of the model.
    VERSION: Version of the model.
    STAGE: Target stage of the transition. Valid values are:
      
      * None: The initial stage of a model version.
      
      * Staging: Staging or pre-production stage.
      
      * Production: Production stage.
      
      * Archived: Archived stage.

Usage:
  databricks model-registry create-transition-request NAME VERSION STAGE [flags]

Flags:
      --comment string   User-provided comment on the action.
  -h, --help             help for create-transition-request
      --json JSON        either inline JSON string or @path/to/file.json with request body (default JSON (0 bytes))

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI model-registry create-webhook --help
Create a webhook.
  
  **NOTE**: This endpoint is in Public Preview.
  
  Creates a registry webhook.

Usage:
  databricks model-registry create-webhook [flags]

Flags:
      --description string             User-specified description for the webhook.
  -h, --help                           help for create-webhook
      --json JSON                      either inline JSON string or @path/to/file.json with request body (default JSON (0 bytes))
      --model-name string              Name of the model whose events would trigger this webhook.
      --status RegistryWebhookStatus   Enable or disable triggering the webhook, or put the webhook into test mode. Supported values: [ACTIVE, DISABLED, TEST_MODE]

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI model-registry delete-comment --help
Delete a comment.
  
  Deletes a comment on a model version.

Usage:
  databricks model-registry delete-comment ID [flags]

Flags:
  -h, --help   help for delete-comment

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI model-registry delete-model --help
Delete a model.
  
  Deletes a registered model.

  Arguments:
    NAME: Registered model unique name identifier.

Usage:
  databricks model-registry delete-model NAME [flags]

Flags:
  -h, --help   help for delete-model

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI model-registry delete-model-tag --help
Delete a model tag.
  
  Deletes the tag for a registered model.

  Arguments:
    NAME: Name of the registered model that the tag was logged under.
    KEY: Name of the tag. The name must be an exact match; wild-card deletion is
      not supported. Maximum size is 250 bytes.

Usage:
  databricks model-registry delete-model-tag NAME KEY [flags]

Flags:
  -h, --help   help for delete-model-tag

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI model-registry delete-model-version --help
Delete a model version.
  
  Deletes a model version.

  Arguments:
    NAME: Name of the registered model
    VERSION: Model version number

Usage:
  databricks model-registry delete-model-version NAME VERSION [flags]

Flags:
  -h, --help   help for delete-model-version

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI model-registry delete-model-version-tag --help
Delete a model version tag.
  
  Deletes a model version tag.

  Arguments:
    NAME: Name of the registered model that the tag was logged under.
    VERSION: Model version number that the tag was logged under.
    KEY: Name of the tag. The name must be an exact match; wild-card deletion is
      not supported. Maximum size is 250 bytes.

Usage:
  databricks model-registry delete-model-version-tag NAME VERSION KEY [flags]

Flags:
  -h, --help   help for delete-model-version-tag

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI model-registry delete-transition-request --help
Delete a transition request.
  
  Cancels a model version stage transition request.

  Arguments:
    NAME: Name of the model.
    VERSION: Version of the model.
    STAGE: Target stage of the transition request. Valid values are:
      
      * None: The initial stage of a model version.
      
      * Staging: Staging or pre-production stage.
      
      * Production: Production stage.
      
      * Archived: Archived stage.
    CREATOR: Username of the user who created this request. Of the transition requests
      matching the specified details, only the one transition created by this
      user will be deleted.

Usage:
  databricks model-registry delete-transition-request NAME VERSION STAGE CREATOR [flags]

Flags:
      --comment string   User-provided comment on the action.
  -h, --help             help for delete-transition-request

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI model-registry delete-webhook --help
Delete a webhook.
  
  **NOTE:** This endpoint is in Public Preview.
  
  Deletes a registry webhook.

Usage:
  databricks model-registry delete-webhook [flags]

Flags:
  -h, --help        help for delete-webhook
      --id string   Webhook ID required to delete a registry webhook.

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI model-registry get-latest-versions --help
Get the latest version.
  
  Gets the latest version of a registered model.

  Arguments:
    NAME: Registered model unique name identifier.

Usage:
  databricks model-registry get-latest-versions NAME [flags]

Flags:
  -h, --help        help for get-latest-versions
      --json JSON   either inline JSON string or @path/to/file.json with request body (default JSON (0 bytes))

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI model-registry get-model --help
Get model.
  
  Get the details of a model. This is a Databricks workspace version of the
  [MLflow endpoint] that also returns the model's Databricks workspace ID and
  the permission level of the requesting user on the model.
  
  [MLflow endpoint]: https://www.mlflow.org/docs/latest/rest-api.html#get-registeredmodel

  Arguments:
    NAME: Registered model unique name identifier.

Usage:
  databricks model-registry get-model NAME [flags]

Flags:
  -h, --help   help for get-model

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI model-registry get-model-version --help
Get a model version.
  
  Get a model version.

  Arguments:
    NAME: Name of the registered model
    VERSION: Model version number

Usage:
  databricks model-registry get-model-version NAME VERSION [flags]

Flags:
  -h, --help   help for get-model-version

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI model-registry get-model-version-download-uri --help
Get a model version URI.
  
  Gets a URI to download the model version.

  Arguments:
    NAME: Name of the registered model
    VERSION: Model version number

Usage:
  databricks model-registry get-model-version-download-uri NAME VERSION [flags]

Flags:
  -h, --help   help for get-model-version-download-uri

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI model-registry get-permission-levels --help
Get registered model permission levels.
  
  Gets the permission levels that a user can have on an object.

  Arguments:
    REGISTERED_MODEL_ID: The registered model for which to get or manage permissions.

Usage:
  databricks model-registry get-permission-levels REGISTERED_MODEL_ID [flags]

Flags:
  -h, --help   help for get-permission-levels

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI model-registry get-permissions --help
Get registered model permissions.
  
  Gets the permissions of a registered model. Registered models can inherit
  permissions from their root object.

  Arguments:
    REGISTERED_MODEL_ID: The registered model for which to get or manage permissions.

Usage:
  databricks model-registry get-permissions REGISTERED_MODEL_ID [flags]

Flags:
  -h, --help   help for get-permissions

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI model-registry list-models --help
List models.
  
  Lists all available registered models, up to the limit specified in
  __max_results__.

Usage:
  databricks model-registry list-models [flags]

Flags:
  -h, --help                help for list-models
      --max-results int     Maximum number of registered models desired.
      --page-token string   Pagination token to go to the next page based on a previous query.

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI model-registry list-transition-requests --help
List transition requests.
  
  Gets a list of all open stage transition requests for the model version.

  Arguments:
    NAME: Name of the model.
    VERSION: Version of the model.

Usage:
  databricks model-registry list-transition-requests NAME VERSION [flags]

Flags:
  -h, --help   help for list-transition-requests

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI model-registry list-webhooks --help
List registry webhooks.
  
  **NOTE:** This endpoint is in Public Preview.
  
  Lists all registry webhooks.

Usage:
  databricks model-registry list-webhooks [flags]

Flags:
  -h, --help                help for list-webhooks
      --model-name string   If not specified, all webhooks associated with the specified events are listed, regardless of their associated model.
      --page-token string   Token indicating the page of artifact results to fetch.

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI model-registry reject-transition-request --help
Reject a transition request.
  
  Rejects a model version stage transition request.

  Arguments:
    NAME: Name of the model.
    VERSION: Version of the model.
    STAGE: Target stage of the transition. Valid values are:
      
      * None: The initial stage of a model version.
      
      * Staging: Staging or pre-production stage.
      
      * Production: Production stage.
      
      * Archived: Archived stage.

Usage:
  databricks model-registry reject-transition-request NAME VERSION STAGE [flags]

Flags:
      --comment string   User-provided comment on the action.
  -h, --help             help for reject-transition-request
      --json JSON        either inline JSON string or @path/to/file.json with request body (default JSON (0 bytes))

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI model-registry rename-model --help
Rename a model.
  
  Renames a registered model.

  Arguments:
    NAME: Registered model unique name identifier.

Usage:
  databricks model-registry rename-model NAME [flags]

Flags:
  -h, --help              help for rename-model
      --json JSON         either inline JSON string or @path/to/file.json with request body (default JSON (0 bytes))
      --new-name string   If provided, updates the name for this registered_model.

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI model-registry search-model-versions --help
Searches model versions.
  
  Searches for specific model versions based on the supplied __filter__.

Usage:
  databricks model-registry search-model-versions [flags]

Flags:
      --filter string       String filter condition, like "name='my-model-name'".
  -h, --help                help for search-model-versions
      --max-results int     Maximum number of models desired.
      --page-token string   Pagination token to go to next page based on previous search query.

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI model-registry search-models --help
Search models.
  
  Search for registered models based on the specified __filter__.

Usage:
  databricks model-registry search-models [flags]

Flags:
      --filter string       String filter condition, like "name LIKE 'my-model-name'".
  -h, --help                help for search-models
      --max-results int     Maximum number of models desired.
      --page-token string   Pagination token to go to the next page based on a previous search query.

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI model-registry set-model-tag --help
Set a tag.
  
  Sets a tag on a registered model.

  Arguments:
    NAME: Unique name of the model.
    KEY: Name of the tag. Maximum size depends on storage backend. If a tag with
      this name already exists, its preexisting value will be replaced by the
      specified value. All storage backends are guaranteed to support key
      values up to 250 bytes in size.
    VALUE: String value of the tag being logged. Maximum size depends on storage
      backend. All storage backends are guaranteed to support key values up to
      5000 bytes in size.

Usage:
  databricks model-registry set-model-tag NAME KEY VALUE [flags]

Flags:
  -h, --help        help for set-model-tag
      --json JSON   either inline JSON string or @path/to/file.json with request body (default JSON (0 bytes))

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI model-registry set-model-version-tag --help
Set a version tag.
  
  Sets a model version tag.

  Arguments:
    NAME: Unique name of the model.
    VERSION: Model version number.
    KEY: Name of the tag. Maximum size depends on storage backend. If a tag with
      this name already exists, its preexisting value will be replaced by the
      specified value. All storage backends are guaranteed to support key
      values up to 250 bytes in size.
    VALUE: String value of the tag being logged. Maximum size depends on storage
      backend. All storage backends are guaranteed to support key values up to
      5000 bytes in size.

Usage:
  databricks model-registry set-model-version-tag NAME VERSION KEY VALUE [flags]

Flags:
  -h, --help        help for set-model-version-tag
      --json JSON   either inline JSON string or @path/to/file.json with request body (default JSON (0 bytes))

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI model-registry set-permissions --help
Set registered model permissions.
  
  Sets permissions on an object, replacing existing permissions if they exist.
  Deletes all direct permissions if none are specified. Objects can inherit
  permissions from their root object.

  Arguments:
    REGISTERED_MODEL_ID: The registered model for which to get or manage permissions.

Usage:
  databricks model-registry set-permissions REGISTERED_MODEL_ID [flags]

Flags:
  -h, --help        help for set-permissions
      --json JSON   either inline JSON string or @path/to/file.json with request body (default JSON (0 bytes))

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI model-registry test-registry-webhook --help
Test a webhook.
  
  **NOTE:** This endpoint is in Public Preview.
  
  Tests a registry webhook.

  Arguments:
    ID: Webhook ID

Usage:
  databricks model-registry test-registry-webhook ID [flags]

Flags:
      --event RegistryWebhookEvent   If event is specified, the test trigger uses the specified event. Supported values: [
                                       COMMENT_CREATED,
                                       MODEL_VERSION_CREATED,
                                       MODEL_VERSION_TAG_SET,
                                       MODEL_VERSION_TRANSITIONED_STAGE,
                                       MODEL_VERSION_TRANSITIONED_TO_ARCHIVED,
                                       MODEL_VERSION_TRANSITIONED_TO_PRODUCTION,
                                       MODEL_VERSION_TRANSITIONED_TO_STAGING,
                                       REGISTERED_MODEL_CREATED,
                                       TRANSITION_REQUEST_CREATED,
                                       TRANSITION_REQUEST_TO_ARCHIVED_CREATED,
                                       TRANSITION_REQUEST_TO_PRODUCTION_CREATED,
                                       TRANSITION_REQUEST_TO_STAGING_CREATED,
                                     ]
  -h, --help                         help for test-registry-webhook
      --json JSON                    either inline JSON string or @path/to/file.json with request body (default JSON (0 bytes))

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI model-registry transition-stage --help
Transition a stage.
  
  Transition a model version's stage. This is a Databricks workspace version of
  the [MLflow endpoint] that also accepts a comment associated with the
  transition to be recorded.",
  
  [MLflow endpoint]: https://www.mlflow.org/docs/latest/rest-api.html#transition-modelversion-stage

  Arguments:
    NAME: Name of the model.
    VERSION: Version of the model.
    STAGE: Target stage of the transition. Valid values are:
      
      * None: The initial stage of a model version.
      
      * Staging: Staging or pre-production stage.
      
      * Production: Production stage.
      
      * Archived: Archived stage.
    ARCHIVE_EXISTING_VERSIONS: Specifies whether to archive all current model versions in the target
      stage.

Usage:
  databricks model-registry transition-stage NAME VERSION STAGE ARCHIVE_EXISTING_VERSIONS [flags]

Flags:
      --comment string   User-provided comment on the action.
  -h, --help             help for transition-stage
      --json JSON        either inline JSON string or @path/to/file.json with request body (default JSON (0 bytes))

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI model-registry update-comment --help
Update a comment.
  
  Post an edit to a comment on a model version.

  Arguments:
    ID: Unique identifier of an activity
    COMMENT: User-provided comment on the action.

Usage:
  databricks model-registry update-comment ID COMMENT [flags]

Flags:
  -h, --help        help for update-comment
      --json JSON   either inline JSON string or @path/to/file.json with request body (default JSON (0 bytes))

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI model-registry update-model --help
Update model.
  
  Updates a registered model.

  Arguments:
    NAME: Registered model unique name identifier.

Usage:
  databricks model-registry update-model NAME [flags]

Flags:
      --description string   If provided, updates the description for this registered_model.
  -h, --help                 help for update-model
      --json JSON            either inline JSON string or @path/to/file.json with request body (default JSON (0 bytes))

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI model-registry update-model-version --help
Update model version.
  
  Updates the model version.

  Arguments:
    NAME: Name of the registered model
    VERSION: Model version number

Usage:
  databricks model-registry update-model-version NAME VERSION [flags]

Flags:
      --description string   If provided, updates the description for this registered_model.
  -h, --help                 help for update-model-version
      --json JSON            either inline JSON string or @path/to/file.json with request body (default JSON (0 bytes))

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI model-registry update-permissions --help
Update registered model permissions.
  
  Updates the permissions on a registered model. Registered models can inherit
  permissions from their root object.

  Arguments:
    REGISTERED_MODEL_ID: The registered model for which to get or manage permissions.

Usage:
  databricks model-registry update-permissions REGISTERED_MODEL_ID [flags]

Flags:
  -h, --help        help for update-permissions
      --json JSON   either inline JSON string or @path/to/file.json with request body (default JSON (0 bytes))

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)

>>> $CLI model-registry update-webhook --help
Update a webhook.
  
  **NOTE:** This endpoint is in Public Preview.
  
  Updates a registry webhook.

  Arguments:
    ID: Webhook ID

Usage:
  databricks model-registry update-webhook ID [flags]

Flags:
      --description string             User-specified description for the webhook.
  -h, --help                           help for update-webhook
      --json JSON                      either inline JSON string or @path/to/file.json with request body (default JSON (0 bytes))
      --status RegistryWebhookStatus   Enable or disable triggering the webhook, or put the webhook into test mode. Supported values: [ACTIVE, DISABLED, TEST_MODE]

Global Flags:
      --debug            enable debug logging
  -o, --output type      output type: text or json (default text)
  -p, --profile string   ~/.databrickscfg profile
  -t, --target string    bundle target to use (if applicable)
