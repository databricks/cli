export JQ_DELETE='
  .bundle.terraform
'
trace $CLI bundle validate -o json | jq -S "del($JQ_DELETE)" > out.validate.json
jq .path < out.requests.txt | sort > out.requests_paths.validate.txt
rm out.requests.txt

$CLI bundle debug plan > out.plan.$DATABRICKS_BUNDLE_ENGINE.json
jq .path < out.requests.txt | sort > out.requests_paths.plan.txt
jq -c < out.requests.txt | sort | jq 'select(.method != "GET" and (.path | contains("/import-file/") | not) and (.path | contains("/telemetry-ext") | not))' > out.requests_full.plan.txt
rm out.requests.txt

trace $CLI bundle deploy
jq -r '.method + " " + .path' < out.requests.txt | sort | grep -v ^GET | grep -v /import-file/ > out.requests_paths.deploy.txt

## This does not work: request to update pipeline foo permissions may come before or after request to create pipeline foo:
#jq -c < out.requests.txt | jq 'select(.method != "GET" and (.path | contains("/import-file/") | not) and (.path | contains("/telemetry-ext") | not))' > out.requests_allperm.deploy.$DATABRICKS_BUNDLE_ENGINE.txt
# Split /permissions requests into separate file because they are not strictly ordered like resources
jq -c < out.requests.txt | grep -v /permissions | jq 'select(.method != "GET" and (.path | contains("/import-file/") | not) and (.path | contains("/telemetry-ext") | not))' > out.requests_noperm.deploy.txt

# We store /permissions requests in different files for terraform/direct but there is almost no difference. There is this reordering that TF does that we don't do:
# diff -U 8 out.requests_perm.deploy.terraform.txt out.requests_perm.deploy.direct-exp.txt
# --- out.requests_perm.deploy.terraform.txt  2025-10-10 14:27:57.011752713 +0200
# +++ out.requests_perm.deploy.direct-exp.txt 2025-10-10 14:27:54.170101547 +0200
# @@ -43,28 +43,28 @@
#    "path": "/api/2.0/permissions/pipelines/[FOOP_ID]",
#    "body": {
#      "access_control_list": [
#        {
#          "permission_level": "CAN_VIEW",
#          "user_name": "viewer@example.com"
#        },
#        {
# +        "group_name": "data-team",
# +        "permission_level": "CAN_MANAGE"
# +      },
# +      {
#          "permission_level": "CAN_MANAGE",
#          "service_principal_name": "servicebot"
#        },
#        {
#          "permission_level": "CAN_MANAGE",
#          "user_name": "admin@databricks.com"
#        },
#        {
# -        "group_name": "data-team",
# -        "permission_level": "CAN_MANAGE"
# -      },
# -      {
#          "permission_level": "IS_OWNER",
#          "user_name": "[USERNAME]"
#        }
#      ]
#    }
# }

jq -c < out.requests.txt | grep /permissions | sort | jq 'select(.method != "GET" and (.path | contains("/import-file/") | not) and (.path | contains("/telemetry-ext") | not))' > out.requests_perm.deploy.$DATABRICKS_BUNDLE_ENGINE.txt


rm out.requests.txt

$CLI bundle summary -o json > out.summary.json
FOOJ_ID=$(jq -r .resources.jobs.fooj.id out.summary.json)
BARJ_ID=$(jq -r .resources.jobs.barj.id out.summary.json)
FOOP_ID=$(jq -r .resources.pipelines.foop.id out.summary.json)
BARP_ID=$(jq -r .resources.pipelines.barp.id out.summary.json)
echo "$FOOJ_ID:FOOJ_ID" >> ACC_REPLS
echo "$BARJ_ID:BARJ_ID" >> ACC_REPLS
echo "$FOOP_ID:FOOP_ID" >> ACC_REPLS
echo "$BARP_ID:BARP_ID" >> ACC_REPLS
rm out.summary.json

trace $CLI bundle destroy --auto-approve
jq -r '.method + " " + .path' < out.requests.txt | sort > out.requests_paths.destroy.$DATABRICKS_BUNDLE_ENGINE.txt
jq -c < out.requests.txt | sort | jq 'select(.method != "GET" and (.path | contains("/import-file/") | not) and (.path | contains("/telemetry-ext") | not))' > out.requests_full.destroy.$DATABRICKS_BUNDLE_ENGINE.json
rm out.requests.txt
