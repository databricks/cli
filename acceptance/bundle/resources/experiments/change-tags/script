cleanup() {
    trace $CLI bundle destroy --auto-approve
    rm out.requests.txt
}

trap cleanup EXIT

deploy_with_plan() {
    trace $CLI bundle plan
    trace $CLI bundle deploy
    experiment_id=$($CLI bundle summary --output json | jq -r '.resources.experiments.my_experiment.id')
    trace $CLI experiments get-experiment $experiment_id | jq '.experiment | {name, artifact_location, tags}'
}

deploy_with_plan_split() {
    trace $CLI bundle plan > out.plan.$DATABRICKS_BUNDLE_ENGINE.txt
    trace $CLI bundle deploy
    experiment_id=$($CLI bundle summary --output json | jq -r '.resources.experiments.my_experiment.id')
    trace $CLI experiments get-experiment $experiment_id | jq '.experiment | {name, artifact_location, tags}'
    title "Print all POST API requests made the the experiments service."
    trace cat out.requests.txt | jq 'select(.method == "POST")' | jq 'select(.path | contains("/api/2.0/mlflow/experiments"))' > out.requests.experiments.$DATABRICKS_BUNDLE_ENGINE.txt
}

title "create the experiment"
trace export EXPERIMENT_ARTIFACT_LOCATION="s3://original-${UNIQUE_NAME}"
trace export EXPERIMENT_NAME_PREFIX="original"
envsubst < templates/one_tag.tmpl > databricks.yml
deploy_with_plan

title "adding a new tag should be a no-op"
trace envsubst < templates/two_tag.tmpl > databricks.yml
deploy_with_plan_split
