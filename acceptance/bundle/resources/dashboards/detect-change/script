envsubst < databricks.yml.tmpl > databricks.yml

cleanup() {
    trace $CLI bundle destroy --auto-approve
    rm out.requests.txt
}
trap cleanup EXIT

title "Check summary before deployment -- should not have id but should have modified_status=created"
trace $CLI bundle summary --output json | jq '.resources.dashboards.file_reference' | jq 'del(.serialized_dashboard)'
trace $CLI bundle deploy

title "Assert that the dashboard exists at the expected path and is, indeed, a dashboard:"
RESOURCE_PATH=$($CLI bundle validate -o json | jq -r '.workspace.resource_path')
DASHBOARD_PATH="${RESOURCE_PATH}/test-dashboard-${UNIQUE_NAME}.lvdash.json"
trace $CLI workspace get-status "${DASHBOARD_PATH}" | jq '{object_type,path}'

title "Check summary again -- should have id but no modified_status"
trace $CLI bundle summary --output json | jq '.resources.dashboards.file_reference' | jq 'del(.serialized_dashboard)' > out.summary.json
trace cat out.summary.json
DASHBOARD_ID=$(jq -r '.id' out.summary.json)
rm out.summary.json
title "Load the dashboard by its ID and confirm its display name: "
$CLI lakeview get "${DASHBOARD_ID}" | jq '{display_name,page_display_name: (.serialized_dashboard | fromjson | .pages[0].displayName)}'

title "Make an out of band modification to the dashboard and confirm that it is detected:\n"
RESOURCE_ID=$($CLI workspace get-status "${DASHBOARD_PATH}" | jq -r '.resource_id')
DASHBOARD_JSON='{"serialized_dashboard": "{}"}'
$CLI lakeview update "${RESOURCE_ID}" --json "${DASHBOARD_JSON}" | jq '{lifecycle_state}'

title "Try to redeploy the bundle and confirm that the out of band modification is detected:"
trace $CLI bundle plan
trace errcode $CLI bundle deploy

title "Redeploy the bundle with the --force flag and confirm that the out of band modification is ignored:"
trace errcode $CLI bundle deploy --force

cat out.requests.txt | \
 jq 'select(.method == "PATCH")' | \
 jq 'select( (.path | contains("/api/2.0/lakeview/dashboards")) or ((.path == "/api/2.0/workspace/mkdirs") and (.body.path | contains("/default/resources"))))' \
 > out.patch.requests.$DATABRICKS_BUNDLE_ENGINE.txt

cat out.requests.txt | \
 jq 'select(.method == "POST")' | \
 jq 'select( (.path | contains("/api/2.0/lakeview/dashboards")) or ((.path == "/api/2.0/workspace/mkdirs") and (.body.path | contains("/default/resources"))))' \
 > out.post.requests.txt
