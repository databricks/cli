export PARENT_PATH="/Users/$USER_NAME/.bundle/change-parent-path-$UNIQUE_NAME/default/resources"

cleanup() {
    trace $CLI bundle destroy --auto-approve
    rm out.requests.txt
}
trap cleanup EXIT

# Create the dashboard with initial parent_path
envsubst < databricks.yml.tmpl > databricks.yml
trace $CLI bundle plan
trace $CLI bundle deploy
dashboard_id=$($CLI bundle summary --output json | jq -r '.resources.dashboards.my_dashboard.id')
trace $CLI lakeview get $dashboard_id | jq '{display_name, lifecycle_state, parent_path, path, serialized_dashboard, warehouse_id}'

# Change the parent_path - this should trigger a recreate (delete + create)
export PARENT_PATH="/Users/$USER_NAME/.bundle/change-parent-path-$UNIQUE_NAME/default/resources2"
envsubst < databricks.yml.tmpl > databricks.yml
trace $CLI bundle plan
trace $CLI bundle deploy
new_dashboard_id=$($CLI bundle summary --output json | jq -r '.resources.dashboards.my_dashboard.id')
trace $CLI lakeview get $new_dashboard_id | jq '{display_name, lifecycle_state, parent_path, path, serialized_dashboard, warehouse_id}'

# Verify that the dashboard ID changed (indicating it was recreated)
if [ "$dashboard_id" != "$new_dashboard_id" ]; then
    echo "Dashboard was recreated: old ID=$dashboard_id, new ID=$new_dashboard_id"
else
    echo "ERROR: Dashboard was not recreated, ID remained the same: $dashboard_id"
fi

# Print API requests made to create parent_path or create / update / delete the dashboard.
cat out.requests.txt | \
 jq 'select(.method == "POST" or .method == "PATCH" or .method == "DELETE")' | \
 jq 'select( (.path | contains("/api/2.0/lakeview/dashboards")) or ((.path == "/api/2.0/workspace/mkdirs") and (.body.path | contains("/default/resources"))))' \
 > out.requests.$DATABRICKS_BUNDLE_ENGINE.txt
