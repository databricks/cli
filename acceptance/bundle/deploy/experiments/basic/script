cleanup() {
    trace $CLI bundle destroy --auto-approve
}

trap cleanup EXIT

title "create the experiment"
trace export EXPERIMENT_ARTIFACT_LOCATION="s3://original-${UNIQUE_NAME}"
trace export EXPERIMENT_NAME="/Users/${CURRENT_USER_NAME}/original-${UNIQUE_NAME}"
trace envsubst < templates/one_tag.tmpl > databricks.yml
trace $CLI bundle plan
trace $CLI bundle deploy
experiment_id=$($CLI bundle summary --output json | jq -r '.resources.experiments.my_experiment.id')
trace $CLI experiments get-experiment $experiment_id | jq '.experiment | {name, artifact_location, tags}'

title "update the name"
trace export EXPERIMENT_NAME="/Users/${CURRENT_USER_NAME}/new-name-${UNIQUE_NAME}"
trace envsubst < templates/one_tag.tmpl > databricks.yml
trace $CLI bundle plan
trace $CLI bundle deploy
experiment_id=$($CLI bundle summary --output json | jq -r '.resources.experiments.my_experiment.id')
trace $CLI experiments get-experiment $experiment_id | jq '.experiment | {name, artifact_location, tags}'

title "updating the artifact location should cause a recreation"
trace export EXPERIMENT_ARTIFACT_LOCATION="s3://new-${UNIQUE_NAME}"
trace envsubst < templates/one_tag.tmpl > databricks.yml
trace $CLI bundle plan
trace $CLI bundle deploy
experiment_id=$($CLI bundle summary --output json | jq -r '.resources.experiments.my_experiment.id')
trace $CLI experiments get-experiment $experiment_id | jq '.experiment | {name, artifact_location, tags}'

title "adding a new tag should be a no-op for direct deployment. It is a no-op as well for terraform, but shows up in the plan due to a persistent drift bug. The actual state of the experiment is not updated."
trace envsubst < templates/two_tag.tmpl > databricks.yml
trace $CLI bundle plan > out.additional_tag.$DATABRICKS_BUNDLE_ENGINE.txt
trace $CLI bundle deploy
experiment_id=$($CLI bundle summary --output json | jq -r '.resources.experiments.my_experiment.id')
trace $CLI experiments get-experiment $experiment_id | jq '.experiment | {name, artifact_location, tags}'
