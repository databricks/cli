cd app

trace errcode $CLI apps run-local --entry-point value-from.yml 2>&1

# We first run the command with different entry point which starts unblocking script
# so we don't need to start it in background. It will install the dependencies as part of the command
trace $CLI apps run-local --prepare-environment --entry-point test.yml 2>&1 | grep -w "Hello, world"

title "Starting the app in background..."
$CLI apps run-local --prepare-environment --debug > ../out.run.txt 2>&1 &
PID=$!
# Ensure background process is killed on script exit
trap 'kill $PID 2>/dev/null || true' EXIT
cd ..

title Waiting for the app to start...
# Use a loop to check for the startup message instead of tail/sed which can be unreliable on Windows
# due to file locking, buffering issues, and different text processing behavior across Windows versions.
# A simple grep loop is more robust across platforms.
while [ -z "$(grep -o "Python Flask app has started with" out.run.txt 2>/dev/null)" ]; do
    sleep 1
done

title "Checking app is running..."
trace curl -s -o - http://127.0.0.1:8001 | jq

title "Sending shutdown request..."
trace curl -s -o /dev/null  http://127.0.0.1:8001/shutdown || true

title "Checking CLI command output..."

trace grep "To debug your app, attach a debugger to port 5678" ./out.run.txt
trace grep -o "Python Flask app has started with: test" ./out.run.txt
rm out.run.txt
