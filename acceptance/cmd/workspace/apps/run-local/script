cd app

trace errcode $CLI apps run-local --entry-point value-from.yml 2>&1

# We first run the command with different entry point which starts unblocking script
# so we don't need to start it in background. It will install the dependencies as part of the command
trace $CLI apps run-local --prepare-environment --entry-point test.yml 2>&1 | grep -w "Hello, world"

# Get 3 unique ports sequentially to avoid conflicts
PORTS=$(allocate_ports.py 3 | tr -d '\r')

# Read ports into array
PORTS_ARR=($(echo "$PORTS"))
PORT="${PORTS_ARR[0]}"
DEBUG_PORT="${PORTS_ARR[1]}"
PROXY_PORT="${PORTS_ARR[2]}"

title "Starting the app in background..."
trace $CLI apps run-local --prepare-environment --debug --port "$PROXY_PORT" --debug-port "$DEBUG_PORT" --app-port "$PORT" > ../out.run.txt 2>&1 &
PID=$!
# Ensure background process is killed on script exit
trap 'kill $PID 2>/dev/null || true' EXIT
cd ..

title Waiting for the app to start...
# Use a loop to check for the startup message instead of tail/sed which can be unreliable on Windows
# due to file locking, buffering issues, and different text processing behavior across Windows versions.
# A simple grep loop is more robust across platforms.
while [ -z "$(grep -o "Python Flask app has started with" out.run.txt 2>/dev/null)" ]; do
    sleep 1
done

title "Checking app is running..."
# Add timeout and retry logic to make curl more resilient to timeouts or any other issues.
MAX_RETRIES=5
TIMEOUT=5

for i in $(seq 1 $MAX_RETRIES); do
    if curl -s --max-time $TIMEOUT --connect-timeout $TIMEOUT -o _curl_output http://127.0.0.1:$PROXY_PORT 2>/dev/null; then
        # Success - now run jq on the output
        trace cat _curl_output | jq
        rm -f _curl_output
        break
    else
        if [ $i -eq $MAX_RETRIES ]; then
            echo "Failed to connect after $MAX_RETRIES attempts"
            rm -f _curl_output
            exit 1
        fi
    fi
done

title "Sending shutdown request..."
trace curl -s -o /dev/null  http://127.0.0.1:$PROXY_PORT/shutdown || true

title "Checking CLI command output..."

trace grep "To debug your app, attach a debugger to port" ./out.run.txt
trace grep -o "Python Flask app has started with: test" ./out.run.txt
rm out.run.txt
